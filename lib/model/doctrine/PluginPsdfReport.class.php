<?php

/**
 * PluginPsdfReport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginPsdfReport extends BasePsdfReport {

    public function execute( $output, Doctrine_Connection $con=null ) {

        require_once(sfConfig::get('psdf_jasperreports_inc'));

        //Declare the paths where the JRXML Reports are stored)
        $reportFileName = sfConfig::get('psdf_reports_dir').DIRECTORY_SEPARATOR.$this->getFileName();
        $salidaFileName = tempnam(sys_get_temp_dir(), 'jr').'.'.$output;

        if( !file_exists($reportFileName) ) {
            throw new sfException(sprintf('Verificar el archivo <strong>%s</strong> del reporte <strong>%s</strong> no existe en <strong>%s</strong>',
                            $this->getFileName(), $this->getName(), sfConfig::get('psdf_reports_dir')) );
        }

        // Corrigo posibles rutas incorrectas en imagenes
        $reportFileName = $this->fixImagePath($reportFileName);

        // Parametros (a que sea dinamico)
        /* $params['fecha_desde'] = $this->getRequestParameter('fechadesde');
        $params['fecha_hasta'] = $this->getRequestParameter('fechahasta');
        $params['unidadorg_origen'] = $this->getRequestParameter('unidadorg');
        $params['nombre_unidadorg'] = $this->getRequestParameter('rel_busca_unidad');  */

        //Begin the Procedure for the Report

        try {
            // recupera los datos de conexion a la base de datos
            $datos = psdfReportPluginUtil::dataConnection($this->getConnection());
            
            // Create the JDBC Connection
            $Conn = new Java("org.altic.jasperReports.JdbcConnection");
            // Call the driver to be used
            $Conn->setDriver("org.postgresql.Driver");
            // Connection URL (since it is in the server, it can be defined as localhost)
            $Conn->setConnectString( sprintf("jdbc:postgresql://%s/%s", $datos['host'], $datos['dbname']) );
            $Conn->setUser($datos['username']);
            $Conn->setPassword($datos['password']);

            // Compile the JRXML in Jasper
            $sJcm = new JavaClass("net.sf.jasperreports.engine.JasperCompileManager");
            $report = $sJcm->compileReport($reportFileName);
            
            //Mapping fields (please refer to the note on top)
            $map = new Java("java.util.HashMap");

            // Parametros
            /*foreach ($this->getParametroConsultas() as $param) {
                $value = $this->getParam($param->getNombre());
                if ($param->getTipo() == 'A') {
                    $map->put($param->getNombre(), $value);
                } else if ($param->getTipo() == 'N') {
                    $map->put($param->getNombre(), new Java('java.lang.Integer', $value));
                } else {// si no es ni A y N es D
                    // Convierto la fecha a dd/MM/yyyy
                    //$fecha = substr($value,0,2).'/'.substr($value,3,2).'/'.substr($value,6,4);
                        $temp = new Java('java.text.SimpleDateFormat', "dd/MM/yyyy");
                    $date = $temp->parse($value);
                    //die('fecha '.$date);
                    $map->put($param->getNombre(), $date);
                }
            }*/

            // What we are using to fill the model
            $sJfm = new JavaClass("net.sf.jasperreports.engine.JasperFillManager");
            $print = $sJfm->fillReport($report, $map, $Conn->getConnection());

            // Export the final report format to pdf u other

            $sJem = new JavaClass("net.sf.jasperreports.engine.JasperExportManager");

            // a pdf
            if( $output==PluginPsdfReportTable::TO_PDF ) {
                $sJem->exportReportToPdfFile($print, $salidaFileName);
                psdfReportPluginUtil::download($salidaFileName, $this->getName());
            }
        }
        catch (JavaException $ex) {
            $trace = new Java("java.io.ByteArrayOutputStream");
            $ex->printStackTrace(new Java("java.io.PrintStream", $trace));
            throw new sfException( 'java stack trace: '.$trace );
        }
    }

    /**
     * Copia la definicion xml de la consulta en el archivo $file
     *
     * @param string $file Archivo donde guardar la definicion
     */
    public function fixImagePath($file) {
        $fp = fopen($file, 'w');
        fwrite($fp, $this->getDefinition());
        fclose($fp);
    }
}